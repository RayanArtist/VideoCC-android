import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { LogOut, User, Home as HomeIcon, Bell, Search, Filter, MessageCircle, MapPin, Calendar, Heart, Settings, Users, Crown, Flag, Blocks, Star, CheckCircle, MoreVertical, Phone, Video, Mic, MicOff, PhoneOff, Camera, Upload, ShieldCheck, VideoOff, Clock, Shield } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { useToast } from "@/hooks/use-toast";
import { authApi } from "@/lib/auth";
import { queryClient } from "@/lib/queryClient";
import type { UserFilter, UpdateProfile, InsertMessage } from "@shared/schema";
import { useTranslation, type Language } from "@/lib/translations";
import { countryCodes, popularCountries, type CountryCode } from "@/lib/countryCodes";
import { AppHeader } from "@/components/AppHeader";

export default function HomePage() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  
  // Social action handlers
  const handleAddToFavorites = (userId: number) => {
    toast({
      title: "افزوده شد",
      description: "کاربر به لیست علاقه‌مندی‌های شما اضافه شد",
    });
  };

  const handleRateUser = (userId: number, rating: number) => {
    toast({
      title: "امتیاز ثبت شد",
      description: "امتیاز شما با موفقیت ثبت شد",
    });
  };

  const handleReportUser = (userId: number) => {
    toast({
      title: "گزارش ارسال شد",
      description: "گزارش شما برای بررسی ارسال شد",
    });
  };

  const handleBlockUser = (userId: number) => {
    toast({
      title: "کاربر مسدود شد",
      description: "این کاربر دیگر برای شما قابل مشاهده نخواهد بود",
    });
  };


  const [selectedUser, setSelectedUser] = useState<any>(null);
  const [isProfileOpen, setIsProfileOpen] = useState(false);
  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const [isMessageDialogOpen, setIsMessageDialogOpen] = useState(false);
  const [messageContent, setMessageContent] = useState("");
  const [isMessagesOpen, setIsMessagesOpen] = useState(false);
  const [selectedConversation, setSelectedConversation] = useState<any>(null);
  const [profileData, setProfileData] = useState({
    username: "",
    age: "",
    gender: "",
    country: "",
    city: "",
    interests: "",
    relationshipStatus: "",
    reasonForBeingHere: "",
    phoneNumber: "",
    bio: "",
  });
  const [verificationCode, setVerificationCode] = useState("");
  const [photoFile, setPhotoFile] = useState<string>("");
  const [isPhoneVerificationOpen, setIsPhoneVerificationOpen] = useState(false);
  const [verificationCodeSent, setVerificationCodeSent] = useState(false);
  const [selectedCountryCode, setSelectedCountryCode] = useState("+98");
  const [isVideoCallActive, setIsVideoCallActive] = useState(false);
  const [localStream, setLocalStream] = useState<MediaStream | null>(null);
  const [isMuted, setIsMuted] = useState(false);
  const [isVideoEnabled, setIsVideoEnabled] = useState(true);
  const [callDuration, setCallDuration] = useState(0);
  const [isAgeVerificationOpen, setIsAgeVerificationOpen] = useState(false);
  const [isIdentityVerificationOpen, setIsIdentityVerificationOpen] = useState(false);
  const [birthDate, setBirthDate] = useState("");
  const [documentPhoto, setDocumentPhoto] = useState("");
  const [idCardPhoto, setIdCardPhoto] = useState("");
  const [passportPhoto, setPassportPhoto] = useState("");
  const [selfiePhoto, setSelfiePhoto] = useState("");
  const [isSearchDialogOpen, setIsSearchDialogOpen] = useState(false);
  

  const [isProfilePictureDialogOpen, setIsProfilePictureDialogOpen] = useState(false);
  const [profilePicture, setProfilePicture] = useState<string>("");
  const [selectedUserProfile, setSelectedUserProfile] = useState<any>(null);
  const [isUserProfileDialogOpen, setIsUserProfileDialogOpen] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState<Language>("en");
  const t = useTranslation(selectedLanguage);
  const [filters, setFilters] = useState<UserFilter>({
    search: "",
    minAge: undefined,
    maxAge: undefined,
    location: "",
  });

  const { data: userData, isLoading } = useQuery({
    queryKey: ['/api/me'],
    queryFn: authApi.getCurrentUser,
  });

  const { data: usersData, isLoading: usersLoading } = useQuery({
    queryKey: ['/api/users', filters],
    queryFn: () => authApi.getUsers(filters),
  });

  const { data: notificationsData } = useQuery({
    queryKey: ['/api/notifications'],
    queryFn: authApi.getNotifications,
  });

  const { data: messagesData } = useQuery({
    queryKey: ['/api/messages', selectedConversation?.id],
    queryFn: () => selectedConversation ? authApi.getMessages(selectedConversation.id) : null,
    enabled: !!selectedConversation,
  });

  const logoutMutation = useMutation({
    mutationFn: authApi.logout,
    onSuccess: () => {
      queryClient.clear();
      setLocation("/auth");
      toast({
        title: "خروج موفق",
        description: "با موفقیت از حساب کاربری خارج شدید",
      });
    },
    onError: () => {
      toast({
        title: "خطا",
        description: "خطایی در خروج رخ داد",
        variant: "destructive",
      });
    },
  });

  const updateProfileMutation = useMutation({
    mutationFn: authApi.updateProfile,
    onSuccess: () => {
      toast({
        title: "پروفایل به‌روزرسانی شد",
        description: "اطلاعات پروفایل شما با موفقیت به‌روزرسانی شد",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/me'] });
      setIsProfileOpen(false);
    },
    onError: (error: any) => {
      toast({
        title: "خطا",
        description: error.message || "خطایی در به‌روزرسانی پروفایل رخ داد",
        variant: "destructive",
      });
    },
  });

  const sendMessageMutation = useMutation({
    mutationFn: authApi.sendMessage,
    onSuccess: () => {
      toast({
        title: "پیام ارسال شد",
        description: "پیام شما با موفقیت ارسال شد",
      });
      setMessageContent("");
      if (!selectedConversation) {
        setIsMessageDialogOpen(false);
        setSelectedUser(null);
      }
      // Refresh messages if in conversation view
      if (selectedConversation) {
        queryClient.invalidateQueries({ queryKey: ['/api/messages', selectedConversation.id] });
      }
      // Refresh notifications to update message notifications
      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });
    },
    onError: (error: any) => {
      toast({
        title: "خطا",
        description: error.message || "خطایی در ارسال پیام رخ داد",
        variant: "destructive",
      });
    },
  });

  const handleUpdateProfile = () => {
    const data: UpdateProfile = {
      username: profileData.username || undefined,
      age: profileData.age ? parseInt(profileData.age) : undefined,
      gender: profileData.gender || undefined,
      country: profileData.country || undefined,
      city: profileData.city || undefined,
      interests: profileData.interests || undefined,
      relationshipStatus: profileData.relationshipStatus || undefined,
      reasonForBeingHere: profileData.reasonForBeingHere || undefined,
      phoneNumber: profileData.phoneNumber || undefined,
      bio: profileData.bio || undefined,
    };
    updateProfileMutation.mutate(data);
  };

  // Verification mutations
  const sendVerificationCodeMutation = useMutation({
    mutationFn: (phoneNumber: string) => authApi.sendVerificationCode(phoneNumber),
    onSuccess: () => {
      setVerificationCodeSent(true);
      toast({ title: "کد تایید ارسال شد", description: "کد تایید به شماره شما ارسال گردید" });
    },
    onError: () => {
      toast({ title: "خطا", description: "ارسال کد تایید با مشکل روبرو شد", variant: "destructive" });
    }
  });

  const verifyPhoneMutation = useMutation({
    mutationFn: ({ phoneNumber, code }: { phoneNumber: string; code: string }) => 
      authApi.verifyPhone(phoneNumber, code),
    onSuccess: () => {
      setIsPhoneVerificationOpen(false);
      setVerificationCodeSent(false);
      setVerificationCode("");
      queryClient.invalidateQueries({ queryKey: ['/api/me'] });
      toast({ title: "تایید موفق", description: "شماره تماس شما با موفقیت تایید شد" });
    },
    onError: () => {
      toast({ title: "خطا", description: "کد تایید نامعتبر است", variant: "destructive" });
    }
  });

  const verifyPhotoMutation = useMutation({
    mutationFn: (photo: string) => authApi.verifyPhoto(photo),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/me'] });
      toast({ title: "تایید موفق", description: "عکس پروفایل شما تایید شد" });
    },
    onError: () => {
      toast({ title: "خطا", description: "تایید عکس با مشکل روبرو شد", variant: "destructive" });
    }
  });

  const verifyAgeMutation = useMutation({
    mutationFn: (data: { birthDate: string; documentPhoto: string }) => authApi.verifyAge(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/me'] });
      toast({ title: "تایید موفق", description: "سن شما تایید شد" });
    },
    onError: () => {
      toast({ title: "خطا", description: "تایید سن با مشکل روبرو شد", variant: "destructive" });
    }
  });

  const verifyIdentityMutation = useMutation({
    mutationFn: (data: { idCardPhoto: string; passportPhoto: string; selfiePhoto: string }) => authApi.verifyIdentity(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/me'] });
      toast({ title: "تایید موفق", description: "هویت شما تایید شد" });
    },
    onError: () => {
      toast({ title: "خطا", description: "تایید هویت با مشکل روبرو شد", variant: "destructive" });
    }
  });

  const handleSendMessage = () => {
    if (!messageContent.trim()) return;
    
    let receiverId: number;
    if (selectedConversation) {
      receiverId = selectedConversation.id;
    } else if (selectedUser) {
      receiverId = selectedUser.id;
    } else {
      return;
    }

    const data: InsertMessage = {
      receiverId,
      content: messageContent.trim(),
    };
    sendMessageMutation.mutate(data);
  };

  const startVideoCall = async (userId: number) => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true
      });
      setLocalStream(stream);
      setIsVideoCallActive(true);
      setCallDuration(0);
      
      // Start call duration timer
      const timer = setInterval(() => {
        setCallDuration(prev => prev + 1);
      }, 1000);
      
      toast({
        title: "تماس تصویری شروع شد",
        description: "در حال اتصال...",
      });
      
      return () => clearInterval(timer);
    } catch (error) {
      toast({
        title: "خطا در تماس تصویری",
        description: "دسترسی به دوربین و میکروفون امکان‌پذیر نیست",
        variant: "destructive",
      });
    }
  };

  const endVideoCall = () => {
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
      setLocalStream(null);
    }
    setIsVideoCallActive(false);
    setCallDuration(0);
    setIsMuted(false);
    setIsVideoEnabled(true);
    
    toast({
      title: "تماس پایان یافت",
      description: "تماس تصویری قطع شد",
    });
  };

  const toggleMute = () => {
    if (localStream) {
      localStream.getAudioTracks().forEach(track => {
        track.enabled = !track.enabled;
      });
      setIsMuted(!isMuted);
    }
  };

  const toggleVideo = () => {
    if (localStream) {
      localStream.getVideoTracks().forEach(track => {
        track.enabled = !track.enabled;
      });
      setIsVideoEnabled(!isVideoEnabled);
    }
  };

  const formatCallDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const handleFilterChange = (newFilters: Partial<UserFilter>) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
  };

  const getTimeAgo = (date: string | Date) => {
    const now = new Date();
    const past = new Date(date);
    const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return "همین الان";
    if (diffInMinutes < 60) return `${diffInMinutes} دقیقه پیش`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} ساعت پیش`;
    return `${Math.floor(diffInMinutes / 1440)} روز پیش`;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white"></div>
      </div>
    );
  }

  if (!userData?.user) {
    setLocation("/");
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      <div className="container mx-auto px-4 py-6">
        {/* App Header */}
        <AppHeader 
          userData={userData}
          selectedLanguage={selectedLanguage}
          onLanguageChange={setSelectedLanguage}
        />
        
        {/* Navigation Actions */}
        <div className="flex justify-end items-center mb-6">
          <div className="flex items-center space-x-2 space-x-reverse">
            {/* Messages */}
            <Sheet open={isMessagesOpen} onOpenChange={setIsMessagesOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="sm" className="text-white hover:bg-white/10">
                  <MessageCircle className="w-5 h-5" />
                  <span className="text-sm mr-1">{t('messages')}</span>
                </Button>
              </SheetTrigger>
              <SheetContent side="left" className="bg-slate-800 border-slate-700 w-full max-w-sm">
                <SheetHeader>
                  <SheetTitle className="text-white">پیام‌های شما</SheetTitle>
                </SheetHeader>
                
                {selectedConversation ? (
                  <div className="flex flex-col h-full mt-4">
                    <div className="flex items-center space-x-2 space-x-reverse border-b border-slate-700 pb-3 mb-4">
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => setSelectedConversation(null)}
                        className="text-white hover:bg-slate-700"
                      >
                        ←
                      </Button>
                      <Avatar className="w-8 h-8">
                        <AvatarImage src={selectedConversation.avatar} />
                        <AvatarFallback className="bg-purple-600 text-white text-sm">
                          {selectedConversation.username.charAt(0).toUpperCase()}
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <h3 className="text-white font-medium">{selectedConversation.username}</h3>
                        <p className="text-slate-400 text-xs">آخرین بازدید: 2 دقیقه پیش</p>
                      </div>
                    </div>
                    
                    <div className="flex-1 overflow-y-auto space-y-3 mb-4">
                      {messagesData?.messages?.map((message: any) => (
                        <div key={message.id} className={`flex ${message.senderId === userData?.user?.id ? 'justify-end' : 'justify-start'}`}>
                          <div className={`max-w-[70%] p-3 rounded-lg ${
                            message.senderId === userData?.user?.id 
                              ? 'bg-blue-600 text-white' 
                              : 'bg-slate-700 text-white'
                          }`}>
                            <p className="text-sm">{message.content}</p>
                            <p className="text-xs opacity-70 mt-1">
                              {new Date(message.createdAt).toLocaleTimeString('fa-IR', { 
                                hour: '2-digit', 
                                minute: '2-digit' 
                              })}
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    <div className="flex space-x-2 space-x-reverse">
                      <Input
                        value={messageContent}
                        onChange={(e) => setMessageContent(e.target.value)}
                        placeholder="پیام خود را بنویسید..."
                        className="bg-slate-700 border-slate-600 text-white"
                        onKeyPress={(e) => {
                          if (e.key === 'Enter' && !e.shiftKey) {
                            e.preventDefault();
                            handleSendMessage();
                          }
                        }}
                      />
                      <Button 
                        onClick={handleSendMessage}
                        disabled={!messageContent.trim() || sendMessageMutation.isPending}
                        className="bg-blue-600 hover:bg-blue-700"
                      >
                        ارسال
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="mt-4 space-y-3">
                    {notificationsData?.notifications?.filter((n: any) => n.type === 'message').map((notification: any) => (
                      <div 
                        key={notification.id} 
                        onClick={() => {
                          setSelectedConversation({
                            id: notification.senderId,
                            username: notification.senderName,
                            avatar: notification.senderAvatar
                          });
                        }}
                        className="p-3 bg-slate-700 rounded-lg cursor-pointer hover:bg-slate-600 transition-colors"
                      >
                        <div className="flex items-center space-x-3 space-x-reverse">
                          <Avatar className="w-10 h-10">
                            <AvatarImage src={notification.senderAvatar} />
                            <AvatarFallback className="bg-purple-600 text-white">
                              {notification.senderName?.charAt(0).toUpperCase()}
                            </AvatarFallback>
                          </Avatar>
                          <div className="flex-1">
                            <h4 className="text-white font-medium">{notification.senderName}</h4>
                            <p className="text-slate-300 text-sm">{notification.message}</p>
                            <p className="text-slate-400 text-xs mt-1">{getTimeAgo(notification.createdAt)}</p>
                          </div>
                          {!notification.isRead && (
                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                          )}
                        </div>
                      </div>
                    ))}
                    
                    {!notificationsData?.notifications?.filter((n: any) => n.type === 'message').length && (
                      <div className="text-center text-slate-400 py-8">
                        <MessageCircle className="w-12 h-12 mx-auto mb-3 opacity-50" />
                        <p>هنوز پیامی دریافت نکرده‌اید</p>
                      </div>
                    )}
                  </div>
                )}
              </SheetContent>
            </Sheet>

            {/* VIP */}
            <Button 
              onClick={() => setLocation("/vip")}
              variant="ghost" 
              size="sm"
              className={`text-white hover:bg-white/20 flex items-center space-x-2 space-x-reverse ${
                userData?.user?.isVip ? 'text-yellow-400 hover:text-yellow-300' : ''
              }`}
            >
              <Crown className="w-4 h-4" />
              <span className="text-sm">{userData?.user?.isVip ? 'VIP فعال' : 'ارتقا به VIP'}</span>
            </Button>

            {/* Notifications */}
            <Sheet open={isNotificationsOpen} onOpenChange={setIsNotificationsOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="sm" className="relative text-white hover:bg-white/10">
                  <Bell className="w-5 h-5" />
                  {notificationsData?.notifications?.filter((n: any) => !n.isRead).length > 0 && (
                    <Badge className="absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 bg-red-500 text-xs">
                      {notificationsData.notifications.filter((n: any) => !n.isRead).length}
                    </Badge>
                  )}
                </Button>
              </SheetTrigger>
              <SheetContent side="left" className="bg-slate-800 border-slate-700 w-full max-w-sm">
                <SheetHeader>
                  <SheetTitle className="text-white">اعلان‌ها</SheetTitle>
                </SheetHeader>
                <div className="mt-4 space-y-4">
                  {notificationsData?.notifications?.map((notification: any) => (
                    <div 
                      key={notification.id} 
                      onClick={() => {
                        if (notification.type === 'message') {
                          setSelectedConversation({
                            id: notification.senderId,
                            username: notification.senderName,
                            avatar: notification.senderAvatar
                          });
                          setIsNotificationsOpen(false);
                          setIsMessagesOpen(true);
                        }
                      }}
                      className={`p-3 rounded-lg cursor-pointer hover:bg-slate-500 transition-colors ${
                        notification.isRead ? 'bg-slate-700' : 'bg-slate-600'
                      }`}
                    >
                      <p className="text-white font-medium">{notification.title}</p>
                      <p className="text-slate-300 text-sm">{notification.message}</p>
                      <p className="text-slate-400 text-xs mt-1">{getTimeAgo(notification.createdAt)}</p>
                    </div>
                  ))}
                  {!notificationsData?.notifications?.length && (
                    <p className="text-slate-400 text-center">اعلانی وجود ندارد</p>
                  )}
                </div>
              </SheetContent>
            </Sheet>

            {/* Profile Settings */}
            <Sheet open={isProfileOpen} onOpenChange={setIsProfileOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="sm" className="text-white hover:bg-white/20 flex items-center space-x-2 space-x-reverse">
                  <Settings className="w-5 h-5" />
                  <span>تنظیمات</span>
                </Button>
              </SheetTrigger>
              <SheetContent side="left" className="bg-slate-800 border-slate-700 w-full max-w-sm">
                <SheetHeader>
                  <SheetTitle className="text-white">تنظیمات پروفایل</SheetTitle>
                  <SheetDescription className="text-slate-300">
                    اطلاعات پروفایل خود را ویرایش کنید
                  </SheetDescription>
                </SheetHeader>
                <div className="mt-6 space-y-3 max-h-[70vh] overflow-y-auto px-1">
                  {/* عکس پروفایل */}
                  <div className="text-center">
                    <div className="relative inline-block">
                      <Avatar className="w-24 h-24 mx-auto">
                        <AvatarImage src={profilePicture || userData.user.avatar} />
                        <AvatarFallback className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-2xl">
                          {userData.user.username.charAt(0).toUpperCase()}
                        </AvatarFallback>
                      </Avatar>
                      <Button
                        size="sm"
                        onClick={() => setIsProfilePictureDialogOpen(true)}
                        className="absolute bottom-0 right-0 rounded-full w-8 h-8 p-0 bg-blue-600 hover:bg-blue-700"
                      >
                        📷
                      </Button>
                    </div>
                    <p className="text-slate-400 text-sm mt-2">برای تغییر عکس پروفایل کلیک کنید</p>
                  </div>

                  {/* نام کاربری */}
                  <div>
                    <Label className="text-slate-200">نام کاربری</Label>
                    <Input
                      value={profileData.username}
                      onChange={(e) => setProfileData(prev => ({ ...prev, username: e.target.value }))}
                      className="bg-slate-700 border-slate-600 text-white"
                      placeholder="نام کاربری جدید"
                    />
                  </div>

                  {/* جنسیت */}
                  <div>
                    <Label className="text-slate-200">جنسیت</Label>
                    <Select value={profileData.gender} onValueChange={(value) => setProfileData(prev => ({ ...prev, gender: value }))}>
                      <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                        <SelectValue placeholder="جنسیت خود را انتخاب کنید" />
                      </SelectTrigger>
                      <SelectContent className="bg-slate-700 border-slate-600">
                        <SelectItem value="مرد">مرد</SelectItem>
                        <SelectItem value="زن">زن</SelectItem>
                        <SelectItem value="نامشخص">ترجیح می‌دهم نگویم</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {/* سن */}
                  <div>
                    <Label className="text-slate-200">سن</Label>
                    <Input
                      type="number"
                      value={profileData.age}
                      onChange={(e) => setProfileData(prev => ({ ...prev, age: e.target.value }))}
                      className="bg-slate-700 border-slate-600 text-white"
                      placeholder="سن خود را وارد کنید"
                    />
                  </div>

                  {/* کشور */}
                  <div>
                    <Label className="text-slate-200">کشور</Label>
                    <Input
                      value={profileData.country}
                      onChange={(e) => setProfileData(prev => ({ ...prev, country: e.target.value }))}
                      className="bg-slate-700 border-slate-600 text-white"
                      placeholder="کشور محل سکونت"
                    />
                  </div>

                  {/* شهر */}
                  <div>
                    <Label className="text-slate-200">شهر</Label>
                    <Input
                      value={profileData.city}
                      onChange={(e) => setProfileData(prev => ({ ...prev, city: e.target.value }))}
                      className="bg-slate-700 border-slate-600 text-white"
                      placeholder="شهر محل سکونت"
                    />
                  </div>

                  {/* علایق */}
                  <div>
                    <Label className="text-slate-200">علایق</Label>
                    <Textarea
                      value={profileData.interests}
                      onChange={(e) => setProfileData(prev => ({ ...prev, interests: e.target.value }))}
                      className="bg-slate-700 border-slate-600 text-white"
                      placeholder="علایق خود را بنویسید (مثل: ورزش، موسیقی، سفر)"
                      rows={2}
                    />
                  </div>

                  {/* وضعیت رابطه */}
                  <div>
                    <Label className="text-slate-200">وضعیت رابطه</Label>
                    <Select value={profileData.relationshipStatus} onValueChange={(value) => setProfileData(prev => ({ ...prev, relationshipStatus: value }))}>
                      <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                        <SelectValue placeholder="وضعیت رابطه خود را انتخاب کنید" />
                      </SelectTrigger>
                      <SelectContent className="bg-slate-700 border-slate-600">
                        <SelectItem value="مجرد">مجرد</SelectItem>
                        <SelectItem value="متاهل">متاهل</SelectItem>
                        <SelectItem value="جداشده">جداشده</SelectItem>
                        <SelectItem value="دیگر">دیگر</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {/* دلیل حضور */}
                  <div>
                    <Label className="text-slate-200">دلیل حضور در اینجا</Label>
                    <Select value={profileData.reasonForBeingHere} onValueChange={(value) => setProfileData(prev => ({ ...prev, reasonForBeingHere: value }))}>
                      <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                        <SelectValue placeholder="دلیل حضور خود را انتخاب کنید" />
                      </SelectTrigger>
                      <SelectContent className="bg-slate-700 border-slate-600">
                        <SelectItem value="تفریح">تفریح</SelectItem>
                        <SelectItem value="رابطه جدی">رابطه جدی</SelectItem>
                        <SelectItem value="وقت گذرونی">وقت گذرونی</SelectItem>
                        <SelectItem value="دیگر">دیگر</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {/* شماره تماس */}
                  <div>
                    <Label className="text-slate-200 flex items-center">
                      شماره تماس
                      {userData.user.isPhoneVerified && (
                        <Badge className="mr-2 bg-green-500 text-white">تایید شده</Badge>
                      )}
                    </Label>
                    <div className="flex space-x-2 space-x-reverse">
                      <Input
                        value={profileData.phoneNumber}
                        onChange={(e) => setProfileData(prev => ({ ...prev, phoneNumber: e.target.value }))}
                        className="flex-1 bg-slate-700 border-slate-600 text-white"
                        placeholder="شماره تماس خود را وارد کنید"
                      />
                      {!userData.user.isPhoneVerified && (
                        <Button
                          onClick={() => setIsPhoneVerificationOpen(true)}
                          size="sm"
                          className="bg-blue-600 hover:bg-blue-700"
                        >
                          تایید
                        </Button>
                      )}
                    </div>
                  </div>

                  {/* درباره من */}
                  <div>
                    <Label className="text-slate-200">درباره من</Label>
                    <Textarea
                      value={profileData.bio}
                      onChange={(e) => setProfileData(prev => ({ ...prev, bio: e.target.value }))}
                      className="bg-slate-700 border-slate-600 text-white"
                      placeholder="درباره خود بنویسید..."
                      rows={3}
                    />
                  </div>

                  {/* بخش تایید هویت */}
                  <div className="border-t border-slate-600 pt-4">
                    <h3 className="text-slate-200 font-medium mb-3">تاییدیه‌ها</h3>
                    <div className="space-y-3">
                      {/* تایید عکس پروفایل */}
                      <div className="flex items-center justify-between">
                        <span className="text-slate-300">تایید عکس پروفایل</span>
                        {userData.user.isPhotoVerified ? (
                          <Badge className="bg-green-500 text-white">تایید شده</Badge>
                        ) : (
                          <Button 
                            size="sm" 
                            className="bg-blue-600 hover:bg-blue-700"
                            onClick={() => verifyPhotoMutation.mutate("demo-photo-data")}
                            disabled={verifyPhotoMutation.isPending}
                          >
                            {verifyPhotoMutation.isPending ? "در حال تایید..." : "تایید عکس"}
                          </Button>
                        )}
                      </div>

                      {/* تایید سن */}
                      <div className="flex items-center justify-between">
                        <span className="text-slate-300">تایید سن</span>
                        {userData.user.isAgeVerified ? (
                          <Badge className="bg-green-500 text-white">تایید شده</Badge>
                        ) : (
                          <Button 
                            size="sm" 
                            className="bg-blue-600 hover:bg-blue-700"
                            onClick={() => setIsAgeVerificationOpen(true)}
                          >
                            {verifyAgeMutation.isPending ? "در حال تایید..." : "تایید سن"}
                          </Button>
                        )}
                      </div>

                      {/* تایید هویت */}
                      <div className="flex items-center justify-between">
                        <span className="text-slate-300">تایید هویت</span>
                        {userData.user.isIdentityVerified ? (
                          <Badge className="bg-green-500 text-white">تایید شده</Badge>
                        ) : (
                          <Button 
                            size="sm" 
                            className="bg-blue-600 hover:bg-blue-700"
                            onClick={() => setIsIdentityVerificationOpen(true)}
                          >
                            {verifyIdentityMutation.isPending ? "در حال تایید..." : "تایید هویت"}
                          </Button>
                        )}
                      </div>
                    </div>
                  </div>

                  <Button 
                    onClick={handleUpdateProfile}
                    disabled={updateProfileMutation.isPending}
                    className="w-full bg-gradient-to-r from-indigo-500 to-purple-600"
                  >
                    {updateProfileMutation.isPending ? "در حال ذخیره..." : "ذخیره تغییرات"}
                  </Button>

                  {/* Logout Button */}
                  <div className="border-t border-slate-600 pt-4 mt-4">
                    <Button
                      onClick={() => logoutMutation.mutate()}
                      disabled={logoutMutation.isPending}
                      variant="outline"
                      className="w-full border-red-500/50 text-red-400 hover:bg-red-500/20 hover:border-red-500"
                    >
                      {logoutMutation.isPending ? (
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-red-400 ml-2" />
                      ) : (
                        <LogOut className="w-4 h-4 ml-2" />
                      )}
                      خروج از حساب
                    </Button>
                  </div>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>

        {/* VIP Users Section */}
        <Card className="glass-effect border-yellow-400/30 mb-4 bg-gradient-to-r from-yellow-900/20 to-amber-900/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-2 space-x-reverse">
                <Crown className="w-5 h-5 text-yellow-400" />
                <h3 className="text-lg font-semibold text-yellow-400">{t('vipMember')} Users</h3>
              </div>
              <Badge className="bg-yellow-500/20 text-yellow-400 border-yellow-400/30">
                {usersData?.users?.filter((user: any) => user.isVip).length || 0} VIP
              </Badge>
            </div>
            <div className="flex space-x-3 space-x-reverse overflow-x-auto pb-2">
              {usersData?.users?.filter((user: any) => user.isVip && user.id !== userData.user.id).map((user: any) => (
                <div 
                  key={user.id}
                  onClick={() => {
                    setSelectedUserProfile(user);
                    setIsUserProfileDialogOpen(true);
                  }}
                  className="flex-shrink-0 bg-gradient-to-b from-yellow-600/20 to-amber-600/20 border border-yellow-400/30 rounded-lg p-3 cursor-pointer hover:bg-yellow-600/30 transition-all duration-200 min-w-[120px]"
                >
                  <div className="text-center">
                    <Avatar className="w-12 h-12 mx-auto mb-2">
                      <AvatarImage src={user.avatar} />
                      <AvatarFallback className="bg-gradient-to-r from-yellow-500 to-amber-600 text-white">
                        {user.username.charAt(0).toUpperCase()}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex items-center justify-center space-x-1 space-x-reverse mb-1">
                      <Crown className="w-3 h-3 text-yellow-400" />
                      <p className="text-yellow-400 text-xs font-semibold truncate">{user.username}</p>
                    </div>
                    <p className="text-yellow-300 text-xs">{user.age} {t('yearsOld')}</p>
                  </div>
                </div>
              ))}

            </div>
          </CardContent>
        </Card>

        {/* VIP Subscription Purchase */}
        <Card className="glass-effect border-purple-400/30 mb-4 bg-gradient-to-r from-purple-900/20 to-pink-900/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2 space-x-reverse">
                <Crown className="w-5 h-5 text-purple-400" />
                <div>
                  <h3 className="text-lg font-semibold text-purple-400">Upgrade to VIP</h3>
                  <p className="text-purple-300 text-sm">Unlock premium features</p>
                </div>
              </div>
              <Button
                onClick={() => setLocation('/vip')}
                className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-4 py-2"
              >
                <Crown className="w-4 h-4 mr-2" />
                Get VIP
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Message and Notification Icons */}
        <div className="grid grid-cols-2 gap-3 mb-6">
          {/* Messages */}
          <Sheet open={isMessagesOpen} onOpenChange={setIsMessagesOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" className="bg-white/10 border-white/20 text-white hover:bg-white/20 flex items-center justify-center space-x-2 space-x-reverse h-12">
                <MessageCircle className="w-5 h-5" />
                <span className="text-sm">Messages</span>
                {notificationsData?.notifications?.filter((n: any) => n.type === 'message' && !n.isRead).length > 0 && (
                  <Badge className="bg-red-500 text-white text-xs ml-1">
                    {notificationsData.notifications.filter((n: any) => n.type === 'message' && !n.isRead).length}
                  </Badge>
                )}
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="bg-slate-800 border-slate-700 w-full max-w-sm">
              <SheetHeader>
                <SheetTitle className="text-white">پیام‌های شما</SheetTitle>
              </SheetHeader>
              
              {selectedConversation ? (
                <div className="flex flex-col h-full mt-4">
                  <div className="flex items-center space-x-2 space-x-reverse border-b border-slate-700 pb-3 mb-4">
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={() => setSelectedConversation(null)}
                      className="text-white hover:bg-slate-700"
                    >
                      ←
                    </Button>
                    <Avatar className="w-8 h-8">
                      <AvatarImage src={selectedConversation.avatar} />
                      <AvatarFallback className="bg-purple-600 text-white text-sm">
                        {selectedConversation.username.charAt(0).toUpperCase()}
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <h3 className="text-white font-medium">{selectedConversation.username}</h3>
                      <p className="text-slate-400 text-xs">آخرین بازدید: 2 دقیقه پیش</p>
                    </div>
                  </div>
                  
                  <div className="flex-1 overflow-y-auto space-y-3 mb-4">
                    {messagesData?.messages?.map((message: any) => (
                      <div key={message.id} className={`flex ${message.senderId === userData?.user?.id ? 'justify-end' : 'justify-start'}`}>
                        <div className={`max-w-[70%] p-3 rounded-lg ${
                          message.senderId === userData?.user?.id 
                            ? 'bg-blue-600 text-white' 
                            : 'bg-slate-700 text-white'
                        }`}>
                          <p className="text-sm">{message.content}</p>
                          <p className="text-xs opacity-70 mt-1">
                            {new Date(message.createdAt).toLocaleTimeString('fa-IR', { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  <div className="flex space-x-2 space-x-reverse">
                    <Input
                      value={messageContent}
                      onChange={(e) => setMessageContent(e.target.value)}
                      placeholder="پیام خود را بنویسید..."
                      className="flex-1 bg-slate-700 border-slate-600 text-white"
                      onKeyPress={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                          e.preventDefault();
                          handleSendMessage();
                        }
                      }}
                    />
                    <Button 
                      onClick={handleSendMessage}
                      disabled={!messageContent.trim() || sendMessageMutation.isPending}
                      size="sm"
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      ارسال
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="mt-4 space-y-3">
                  {/* Conversation list here */}
                  <p className="text-slate-400 text-center">گفتگوهای شما اینجا نمایش داده می‌شود</p>
                </div>
              )}
            </SheetContent>
          </Sheet>

          {/* Notifications */}
          <Sheet open={isNotificationsOpen} onOpenChange={setIsNotificationsOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" className="bg-white/10 border-white/20 text-white hover:bg-white/20 flex items-center justify-center space-x-2 space-x-reverse h-12">
                <Bell className="w-5 h-5" />
                <span className="text-sm">Notifications</span>
                {notificationsData?.notifications?.filter((n: any) => !n.isRead).length > 0 && (
                  <Badge className="bg-red-500 text-white text-xs ml-1">
                    {notificationsData.notifications.filter((n: any) => !n.isRead).length}
                  </Badge>
                )}
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="bg-slate-800 border-slate-700 w-full max-w-sm">
              <SheetHeader>
                <SheetTitle className="text-white">اعلان‌ها</SheetTitle>
              </SheetHeader>
              <div className="mt-4 space-y-4">
                {notificationsData?.notifications?.map((notification: any) => (
                  <div 
                    key={notification.id} 
                    onClick={() => {
                      if (notification.type === 'message') {
                        setSelectedConversation({
                          id: notification.senderId,
                          username: notification.senderName,
                          avatar: notification.senderAvatar
                        });
                        setIsNotificationsOpen(false);
                        setIsMessagesOpen(true);
                      }
                    }}
                    className={`p-3 rounded-lg cursor-pointer hover:bg-slate-500 transition-colors ${
                      notification.isRead ? 'bg-slate-700' : 'bg-slate-600'
                    }`}
                  >
                    <p className="text-white font-medium">{notification.title}</p>
                    <p className="text-slate-300 text-sm">{notification.message}</p>
                    <p className="text-slate-400 text-xs mt-1">{getTimeAgo(notification.createdAt)}</p>
                  </div>
                ))}
                {!notificationsData?.notifications?.length && (
                  <p className="text-slate-400 text-center">اعلانی وجود ندارد</p>
                )}
              </div>
            </SheetContent>
          </Sheet>
        </div>

        {/* Profile Settings Sheet */}
        <Sheet open={isProfileOpen} onOpenChange={setIsProfileOpen}>
          <SheetTrigger asChild>
            <div></div>
          </SheetTrigger>
          <SheetContent side="left" className="bg-slate-800 border-slate-700 w-full max-w-sm">
              <SheetHeader>
                <SheetTitle className="text-white">تنظیمات پروفایل</SheetTitle>
                <SheetDescription className="text-slate-300">
                  اطلاعات پروفایل خود را ویرایش کنید
                </SheetDescription>
              </SheetHeader>
              <div className="mt-6 space-y-3 max-h-[70vh] overflow-y-auto px-1">
                {/* عکس پروفایل */}
                <div className="text-center">
                  <div className="relative inline-block">
                    <Avatar className="w-24 h-24 mx-auto">
                      <AvatarImage src={profilePicture || userData.user.avatar} />
                      <AvatarFallback className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-2xl">
                        {userData.user.username.charAt(0).toUpperCase()}
                      </AvatarFallback>
                    </Avatar>
                    <Button
                      size="sm"
                      onClick={() => setIsProfilePictureDialogOpen(true)}
                      className="absolute bottom-0 right-0 rounded-full w-8 h-8 p-0 bg-blue-600 hover:bg-blue-700"
                    >
                      📷
                    </Button>
                  </div>
                  <p className="text-slate-400 text-sm mt-2">برای تغییر عکس پروفایل کلیک کنید</p>
                </div>

                {/* نام کاربری */}
                <div>
                  <Label className="text-slate-200">نام کاربری</Label>
                  <Input
                    value={profileData.username}
                    onChange={(e) => setProfileData(prev => ({ ...prev, username: e.target.value }))}
                    className="bg-slate-700 border-slate-600 text-white"
                    placeholder="نام کاربری جدید"
                  />
                </div>

                {/* جنسیت */}
                <div>
                  <Label className="text-slate-200">جنسیت</Label>
                  <Select value={profileData.gender} onValueChange={(value) => setProfileData(prev => ({ ...prev, gender: value }))}>
                    <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                      <SelectValue placeholder="جنسیت خود را انتخاب کنید" />
                    </SelectTrigger>
                    <SelectContent className="bg-slate-700 border-slate-600">
                      <SelectItem value="مرد">مرد</SelectItem>
                      <SelectItem value="زن">زن</SelectItem>
                      <SelectItem value="نامشخص">ترجیح می‌دهم نگویم</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* سن */}
                <div>
                  <Label className="text-slate-200">سن</Label>
                  <Input
                    type="number"
                    value={profileData.age}
                    onChange={(e) => setProfileData(prev => ({ ...prev, age: e.target.value }))}
                    className="bg-slate-700 border-slate-600 text-white"
                    placeholder="سن شما"
                  />
                </div>

                {/* شماره تلفن */}
                <div>
                  <Label className="text-slate-200">شماره تلفن</Label>
                  <div className="flex space-x-2 space-x-reverse">
                    <Select value={selectedCountryCode} onValueChange={setSelectedCountryCode}>
                      <SelectTrigger className="w-24 bg-slate-700 border-slate-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-slate-700 border-slate-600 max-h-48">
                        {countryCodes.map((country) => (
                          <SelectItem key={country.code} value={country.code}>
                            {country.flag} {country.code}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <Input
                      value={profileData.phoneNumber}
                      onChange={(e) => setProfileData(prev => ({ ...prev, phoneNumber: e.target.value }))}
                      className="flex-1 bg-slate-700 border-slate-600 text-white"
                      placeholder="شماره تلفن"
                    />
                  </div>
                </div>

                {/* موقعیت مکانی */}
                <div>
                  <Label className="text-slate-200">موقعیت مکانی</Label>
                  <Input
                    value={profileData.city}
                    onChange={(e) => setProfileData(prev => ({ ...prev, city: e.target.value }))}
                    className="bg-slate-700 border-slate-600 text-white"
                    placeholder="شهر یا کشور"
                  />
                </div>

                {/* بیوگرافی */}
                <div>
                  <Label className="text-slate-200">بیوگرافی</Label>
                  <Textarea
                    value={profileData.bio}
                    onChange={(e) => setProfileData(prev => ({ ...prev, bio: e.target.value }))}
                    className="bg-slate-700 border-slate-600 text-white"
                    placeholder="درباره خودتان بنویسید..."
                    rows={3}
                  />
                </div>

                {/* تایید هویت */}
                <div className="bg-blue-900/30 rounded-lg p-3 border border-blue-600/30">
                  <h4 className="text-blue-300 font-semibold mb-3">تایید هویت</h4>
                  <div className="space-y-3 text-sm">
                    {/* تایید شماره تلفن */}
                    <div className="flex items-center justify-between">
                      <span className="text-slate-300">تایید شماره تلفن</span>
                      {userData.user.isPhoneVerified ? (
                        <Badge className="bg-green-500 text-white">تایید شده</Badge>
                      ) : (
                        <Button 
                          size="sm" 
                          className="bg-blue-600 hover:bg-blue-700"
                          onClick={() => setIsPhoneVerificationOpen(true)}
                        >
                          تایید تلفن
                        </Button>
                      )}
                    </div>

                    {/* تایید عکس */}
                    <div className="flex items-center justify-between">
                      <span className="text-slate-300">تایید عکس</span>
                      {userData.user.isPhotoVerified ? (
                        <Badge className="bg-green-500 text-white">تایید شده</Badge>
                      ) : (
                        <Button 
                          size="sm" 
                          className="bg-blue-600 hover:bg-blue-700"
                          onClick={() => verifyPhotoMutation.mutate(profilePicture || userData.user.avatar)}
                          disabled={verifyPhotoMutation.isPending}
                        >
                          {verifyPhotoMutation.isPending ? "در حال تایید..." : "تایید عکس"}
                        </Button>
                      )}
                    </div>

                    {/* تایید سن */}
                    <div className="flex items-center justify-between">
                      <span className="text-slate-300">تایید سن</span>
                      {userData.user.isAgeVerified ? (
                        <Badge className="bg-green-500 text-white">تایید شده</Badge>
                      ) : (
                        <Button 
                          size="sm" 
                          className="bg-blue-600 hover:bg-blue-700"
                          onClick={() => setIsAgeVerificationOpen(true)}
                        >
                          تایید سن
                        </Button>
                      )}
                    </div>

                    {/* تایید هویت */}
                    <div className="flex items-center justify-between">
                      <span className="text-slate-300">تایید هویت</span>
                      {userData.user.isIdentityVerified ? (
                        <Badge className="bg-green-500 text-white">تایید شده</Badge>
                      ) : (
                        <Button 
                          size="sm" 
                          className="bg-blue-600 hover:bg-blue-700"
                          onClick={() => setIsIdentityVerificationOpen(true)}
                        >
                          تایید هویت
                        </Button>
                      )}
                    </div>
                  </div>
                </div>

                <Button 
                  onClick={handleUpdateProfile}
                  disabled={updateProfileMutation.isPending}
                  className="w-full bg-gradient-to-r from-indigo-500 to-purple-600"
                >
                  {updateProfileMutation.isPending ? "در حال ذخیره..." : "ذخیره تغییرات"}
                </Button>

                {/* Logout Button */}
                <div className="border-t border-slate-600 pt-4 mt-4">
                  <Button
                    onClick={() => logoutMutation.mutate()}
                    disabled={logoutMutation.isPending}
                    variant="outline"
                    className="w-full border-red-500/50 text-red-400 hover:bg-red-500/20 hover:border-red-500"
                  >
                    {logoutMutation.isPending ? (
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-red-400 ml-2" />
                    ) : (
                      <LogOut className="w-4 h-4 ml-2" />
                    )}
                    خروج از حساب
                  </Button>
                </div>
              </div>
            </SheetContent>
          </Sheet>



        {/* User List */}
        <div className="grid grid-cols-2 gap-4">
          {usersLoading ? (
            <div className="col-span-full flex justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
            </div>
          ) : (
            usersData?.users?.filter((user: any) => user.id !== userData.user.id).map((user: any) => (
              <motion.div
                key={user.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                <Card 
                  onClick={() => {
                    setSelectedUserProfile(user);
                    setIsUserProfileDialogOpen(true);
                  }}
                  className="glass-effect border-white/20 hover:bg-white/20 transition-all duration-200 cursor-pointer group"
                >
                  <CardContent className="p-4">
                    {/* عکس، اسم و سن */}
                    <div className="text-center mb-4">
                      <Avatar className="w-20 h-20 mx-auto mb-3">
                        <AvatarImage src={user.avatar} />
                        <AvatarFallback className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-2xl">
                          {user.username.charAt(0).toUpperCase()}
                        </AvatarFallback>
                      </Avatar>
                      
                      <div className="flex items-center justify-center space-x-2 space-x-reverse mb-1">
                        <h3 className="text-white font-bold text-lg">{user.username}</h3>
                        {(user.isPhoneVerified && user.isPhotoVerified && user.isAgeVerified && user.isIdentityVerified) && (
                          <CheckCircle className="w-5 h-5 text-blue-400" />
                        )}
                        {user.isVip && (
                          <Crown className="w-5 h-5 text-yellow-400" />
                        )}
                      </div>
                      
                      {user.age && (
                        <p className="text-slate-300 text-sm mb-2">{user.age} ساله</p>
                      )}
                      
                      {/* وضعیت آنلاین/آفلاین */}
                      <div className="flex items-center justify-center space-x-1 space-x-reverse">
                        <div className={`w-2 h-2 rounded-full ${user.isOnline ? 'bg-green-500' : 'bg-gray-500'}`}></div>
                        <span className={`text-xs ${user.isOnline ? 'text-green-400' : 'text-gray-400'}`}>
                          {user.isOnline ? "آنلاین" : "آفلاین"}
                        </span>
                      </div>
                    </div>

                    {/* دکمه‌های پیام، تماس و منو */}
                    <div className="grid grid-cols-3 gap-2">
                      <Button
                        size="sm"
                        onClick={(e) => {
                          e.stopPropagation();
                          setSelectedUser(user);
                          setIsMessageDialogOpen(true);
                        }}
                        className="bg-blue-600 hover:bg-blue-700 text-white"
                      >
                        <MessageCircle className="w-4 h-4" />
                      </Button>
                      
                      <Button
                        size="sm"
                        onClick={(e) => {
                          e.stopPropagation();
                          setSelectedUserProfile(user);
                          startVideoCall(user.id);
                        }}
                        className="bg-green-600 hover:bg-green-700 text-white"
                      >
                        <Video className="w-4 h-4" />
                      </Button>

                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={(e) => e.stopPropagation()}
                            className="border-slate-600 text-slate-400 hover:bg-slate-700 hover:text-white"
                          >
                            <MoreVertical className="w-4 h-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent className="bg-slate-800 border-slate-700">
                          <DropdownMenuItem 
                            className="text-white hover:bg-slate-700 cursor-pointer"
                            onClick={() => handleAddToFavorites(user.id)}
                          >
                            <Heart className="w-4 h-4 ml-2" />
                            افزودن به علاقه‌مندی‌ها
                          </DropdownMenuItem>
                          <DropdownMenuItem 
                            className="text-white hover:bg-slate-700 cursor-pointer"
                            onClick={() => handleRateUser(user.id, 5)}
                          >
                            <Star className="w-4 h-4 ml-2" />
                            امتیاز دادن
                          </DropdownMenuItem>
                          <DropdownMenuItem 
                            className="text-white hover:bg-slate-700 cursor-pointer"
                            onClick={() => handleReportUser(user.id)}
                          >
                            <Flag className="w-4 h-4 ml-2" />
                            گزارش کاربر
                          </DropdownMenuItem>
                          <DropdownMenuItem 
                            className="text-red-400 hover:bg-slate-700 cursor-pointer"
                            onClick={() => handleBlockUser(user.id)}
                          >
                            <Blocks className="w-4 h-4 ml-2" />
                            مسدود کردن
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))
          )}
          
          {!usersLoading && (!usersData?.users?.length || usersData.users.filter((user: any) => user.id !== userData.user.id).length === 0) && (
            <div className="col-span-full text-center py-12">
              <Users className="w-12 h-12 text-slate-400 mx-auto mb-4" />
              <p className="text-slate-400">کاربری یافت نشد</p>
              <p className="text-slate-500 text-sm">فیلترهای جستجو را تغییر دهید</p>
            </div>
          )}
        </div>

        {/* Message Dialog */}
        <Dialog open={isMessageDialogOpen} onOpenChange={setIsMessageDialogOpen}>
          <DialogContent className="bg-slate-800 border-slate-700">
            <DialogHeader>
              <DialogTitle className="text-white">ارسال پیام به {selectedUser?.username}</DialogTitle>
              <DialogDescription className="text-slate-300">
                پیام خود را برای آشنایی بیشتر ارسال کنید
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <Textarea
                value={messageContent}
                onChange={(e) => setMessageContent(e.target.value)}
                className="bg-slate-700 border-slate-600 text-white"
                placeholder="پیام خود را بنویسید..."
                rows={4}
              />
              <div className="flex justify-end space-x-2 space-x-reverse">
                <Button 
                  variant="outline" 
                  onClick={() => setIsMessageDialogOpen(false)}
                  className="bg-slate-700 border-slate-600 text-white hover:bg-slate-600"
                >
                  انصراف
                </Button>
                <Button 
                  onClick={handleSendMessage}
                  disabled={!messageContent.trim() || sendMessageMutation.isPending}
                  className="bg-gradient-to-r from-indigo-500 to-purple-600"
                >
                  {sendMessageMutation.isPending ? "در حال ارسال..." : "ارسال پیام"}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Profile Picture Upload Dialog */}
        <Dialog open={isProfilePictureDialogOpen} onOpenChange={setIsProfilePictureDialogOpen}>
          <DialogContent className="bg-slate-800 border-slate-700 text-white max-w-[90vw] w-full mx-4">
            <DialogHeader>
              <DialogTitle className="text-slate-200">تغییر عکس پروفایل</DialogTitle>
              <DialogDescription className="text-slate-300">
                عکس جدید خود را انتخاب کنید یا با دوربین بگیرید
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              {profilePicture && (
                <div className="text-center">
                  <Avatar className="w-32 h-32 mx-auto">
                    <AvatarImage src={profilePicture} />
                    <AvatarFallback className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white">
                      {userData.user.username.charAt(0).toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <p className="text-slate-400 text-sm mt-2">پیش‌نمایش عکس جدید</p>
                </div>
              )}
              
              <div className="grid grid-cols-2 gap-3">
                <Button
                  onClick={() => {
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = 'image/*';
                    input.onchange = (e) => {
                      const file = (e.target as HTMLInputElement).files?.[0];
                      if (file) {
                        // Compress image before setting
                        const canvas = document.createElement('canvas');
                        const ctx = canvas.getContext('2d');
                        const img = new Image();
                        
                        img.onload = () => {
                          // Calculate new dimensions (max 400x400)
                          const maxSize = 400;
                          let { width, height } = img;
                          
                          if (width > height) {
                            if (width > maxSize) {
                              height = (height * maxSize) / width;
                              width = maxSize;
                            }
                          } else {
                            if (height > maxSize) {
                              width = (width * maxSize) / height;
                              height = maxSize;
                            }
                          }
                          
                          canvas.width = width;
                          canvas.height = height;
                          
                          // Draw and compress
                          ctx?.drawImage(img, 0, 0, width, height);
                          const compressedDataURL = canvas.toDataURL('image/jpeg', 0.8);
                          setProfilePicture(compressedDataURL);
                        };
                        
                        const reader = new FileReader();
                        reader.onload = (e) => {
                          img.src = e.target?.result as string;
                        };
                        reader.readAsDataURL(file);
                      }
                    };
                    input.click();
                  }}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  📁 انتخاب از گالری
                </Button>
                
                <Button
                  onClick={() => {
                    navigator.mediaDevices.getUserMedia({ video: true, audio: false })
                      .then(stream => {
                        const video = document.createElement('video');
                        video.srcObject = stream;
                        video.play();
                        
                        const canvas = document.createElement('canvas');
                        const ctx = canvas.getContext('2d');
                        
                        setTimeout(() => {
                          // Calculate dimensions for camera capture (max 400x400)
                          const maxSize = 400;
                          let width = video.videoWidth;
                          let height = video.videoHeight;
                          
                          if (width > height) {
                            if (width > maxSize) {
                              height = (height * maxSize) / width;
                              width = maxSize;
                            }
                          } else {
                            if (height > maxSize) {
                              width = (width * maxSize) / height;
                              height = maxSize;
                            }
                          }
                          
                          canvas.width = width;
                          canvas.height = height;
                          ctx?.drawImage(video, 0, 0, width, height);
                          
                          const dataURL = canvas.toDataURL('image/jpeg', 0.8);
                          setProfilePicture(dataURL);
                          
                          stream.getTracks().forEach(track => track.stop());
                          
                          toast({
                            title: "عکس گرفته شد",
                            description: "عکس شما با موفقیت ثبت شد",
                          });
                        }, 3000);
                      })
                      .catch(() => {
                        toast({
                          title: "خطا",
                          description: "دسترسی به دوربین امکان‌پذیر نیست",
                          variant: "destructive",
                        });
                      });
                  }}
                  className="bg-green-600 hover:bg-green-700"
                >
                  📷 گرفتن عکس
                </Button>
              </div>
              
              <div className="flex justify-end space-x-2 space-x-reverse">
                <Button
                  variant="outline"
                  onClick={() => {
                    setIsProfilePictureDialogOpen(false);
                    setProfilePicture("");
                  }}
                  className="border-slate-600 text-slate-300 hover:bg-slate-700"
                >
                  انصراف
                </Button>
                <Button
                  onClick={() => {
                    if (profilePicture) {
                      // Update profile with new picture only
                      const updatedData = { 
                        avatar: profilePicture
                      };
                      updateProfileMutation.mutate(updatedData, {
                        onSuccess: () => {
                          setIsProfilePictureDialogOpen(false);
                          setProfilePicture("");
                          // Refresh user data to show new avatar immediately
                          queryClient.invalidateQueries({ queryKey: ['/api/me'] });
                          toast({
                            title: "عکس بروزرسانی شد",
                            description: "عکس پروفایل شما با موفقیت تغییر کرد",
                          });
                        },
                        onError: (error: any) => {
                          console.error('Avatar update error:', error);
                          toast({
                            title: "خطا در بروزرسانی عکس",
                            description: error.message || "مشکلی در ذخیره عکس پیش آمد. سایز عکس را کم کنید.",
                            variant: "destructive",
                          });
                        }
                      });
                    }
                  }}
                  disabled={!profilePicture}
                  className="bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
                >
                  ذخیره عکس
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Phone Verification Dialog */}
        <Dialog open={isPhoneVerificationOpen} onOpenChange={setIsPhoneVerificationOpen}>
          <DialogContent className="bg-slate-800 border-slate-700 text-white">
            <DialogHeader>
              <DialogTitle className="text-slate-200">تایید شماره تماس</DialogTitle>
              <DialogDescription className="text-slate-300">
                برای تایید شماره تماس، کد ارسال شده را وارد کنید
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              {!verificationCodeSent ? (
                <>
                  <div>
                    <Label className="text-slate-200">شماره تماس</Label>
                    <div className="flex space-x-2 space-x-reverse">
                      <Select value={selectedCountryCode} onValueChange={setSelectedCountryCode}>
                        <SelectTrigger className="w-32 bg-slate-700 border-slate-600 text-white">
                          <SelectValue>
                            {countryCodes.find(c => c.code === selectedCountryCode)?.flag} {selectedCountryCode}
                          </SelectValue>
                        </SelectTrigger>
                        <SelectContent className="bg-slate-700 border-slate-600 max-h-60">
                          <div className="text-slate-300 text-xs p-2 border-b border-slate-600">محبوب ترین</div>
                          {popularCountries.map(code => {
                            const country = countryCodes.find(c => c.code === code);
                            return country ? (
                              <SelectItem key={code} value={code} className="text-white hover:bg-slate-600">
                                {country.flag} {country.code} {country.country}
                              </SelectItem>
                            ) : null;
                          })}
                          <div className="text-slate-300 text-xs p-2 border-t border-slate-600">همه کشورها</div>
                          {countryCodes.filter(c => !popularCountries.includes(c.code)).map(country => (
                            <SelectItem key={country.code} value={country.code} className="text-white hover:bg-slate-600">
                              {country.flag} {country.code} {country.country}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <Input
                        value={profileData.phoneNumber}
                        onChange={(e) => setProfileData(prev => ({ ...prev, phoneNumber: e.target.value }))}
                        className="flex-1 bg-slate-700 border-slate-600 text-white"
                        placeholder="شماره تماس بدون کد کشور"
                      />
                    </div>
                  </div>
                  <Button 
                    onClick={() => {
                      const fullPhoneNumber = selectedCountryCode + profileData.phoneNumber;
                      sendVerificationCodeMutation.mutate(fullPhoneNumber);
                    }}
                    disabled={!profileData.phoneNumber || sendVerificationCodeMutation.isPending}
                    className="w-full bg-blue-600 hover:bg-blue-700"
                  >
                    {sendVerificationCodeMutation.isPending ? "در حال ارسال..." : "ارسال کد تایید"}
                  </Button>
                </>
              ) : (
                <>
                  <div className="text-center text-slate-300 text-sm">
                    کد تایید به شماره {profileData.phoneNumber} ارسال شد
                  </div>
                  <div>
                    <Label className="text-slate-200">کد تایید</Label>
                    <Input
                      value={verificationCode}
                      onChange={(e) => setVerificationCode(e.target.value)}
                      className="bg-slate-700 border-slate-600 text-white text-center"
                      placeholder="کد 4 رقمی را وارد کنید"
                      maxLength={4}
                    />
                  </div>
                  <div className="flex space-x-2 space-x-reverse">
                    <Button 
                      onClick={() => {
                        const fullPhoneNumber = selectedCountryCode + profileData.phoneNumber;
                        verifyPhoneMutation.mutate({ 
                          phoneNumber: fullPhoneNumber, 
                          code: verificationCode 
                        });
                      }}
                      disabled={verificationCode.length !== 4 || verifyPhoneMutation.isPending}
                      className="flex-1 bg-green-600 hover:bg-green-700"
                    >
                      {verifyPhoneMutation.isPending ? "در حال تایید..." : "تایید"}
                    </Button>
                    <Button 
                      onClick={() => {
                        setVerificationCodeSent(false);
                        setVerificationCode("");
                      }}
                      variant="outline"
                      className="border-slate-600 text-slate-300"
                    >
                      ویرایش شماره
                    </Button>
                  </div>
                </>
              )}
            </div>
          </DialogContent>
        </Dialog>

        {/* User Profile Dialog */}
        <Dialog open={isUserProfileDialogOpen} onOpenChange={setIsUserProfileDialogOpen}>
          <DialogContent className="bg-slate-800 border-slate-700 text-white max-w-[90vw] w-full mx-4">
            <DialogHeader>
              <DialogTitle className="text-center text-xl">پروفایل کاربر</DialogTitle>
            </DialogHeader>
            
            {selectedUserProfile && (
              <div className="space-y-6">
                {/* Profile Header */}
                <div className="text-center">
                  <Avatar className="w-24 h-24 mx-auto mb-4">
                    <AvatarImage src={selectedUserProfile.avatar} />
                    <AvatarFallback className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-2xl">
                      {selectedUserProfile.username.charAt(0).toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex items-center justify-center space-x-2 space-x-reverse mb-2">
                    <h2 className="text-2xl font-bold">{selectedUserProfile.username}</h2>
                    {(selectedUserProfile.isPhoneVerified && selectedUserProfile.isPhotoVerified && selectedUserProfile.isAgeVerified && selectedUserProfile.isIdentityVerified) && (
                      <CheckCircle className="w-6 h-6 text-blue-400" />
                    )}
                    {selectedUserProfile.isVip && (
                      <Crown className="w-6 h-6 text-yellow-400" />
                    )}
                  </div>
                  {selectedUserProfile.isOnline && (
                    <div className="flex items-center justify-center text-green-400 text-sm">
                      <div className="w-2 h-2 bg-green-500 rounded-full ml-1"></div>
                      آنلاین
                    </div>
                  )}
                </div>

                {/* Profile Info */}
                <div className="grid grid-cols-2 gap-4 text-sm">
                  {selectedUserProfile.age && (
                    <div className="bg-slate-700 p-3 rounded-lg">
                      <span className="text-slate-400">سن:</span>
                      <span className="text-white mr-2">{selectedUserProfile.age} ساله</span>
                    </div>
                  )}
                  {selectedUserProfile.gender && (
                    <div className="bg-slate-700 p-3 rounded-lg">
                      <span className="text-slate-400">جنسیت:</span>
                      <span className="text-white mr-2">{selectedUserProfile.gender}</span>
                    </div>
                  )}
                  {selectedUserProfile.country && (
                    <div className="bg-slate-700 p-3 rounded-lg">
                      <span className="text-slate-400">کشور:</span>
                      <span className="text-white mr-2">{selectedUserProfile.country}</span>
                    </div>
                  )}
                  {selectedUserProfile.city && (
                    <div className="bg-slate-700 p-3 rounded-lg">
                      <span className="text-slate-400">شهر:</span>
                      <span className="text-white mr-2">{selectedUserProfile.city}</span>
                    </div>
                  )}
                </div>

                {selectedUserProfile.bio && (
                  <div className="bg-slate-700 p-4 rounded-lg">
                    <h3 className="text-slate-400 text-sm mb-2">درباره من:</h3>
                    <p className="text-white">{selectedUserProfile.bio}</p>
                  </div>
                )}

                {selectedUserProfile.interests && (
                  <div className="bg-slate-700 p-4 rounded-lg">
                    <h3 className="text-slate-400 text-sm mb-2">علایق:</h3>
                    <p className="text-white">{selectedUserProfile.interests}</p>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="grid grid-cols-3 gap-3">
                  <Button
                    onClick={() => {
                      setSelectedUser(selectedUserProfile);
                      setIsUserProfileDialogOpen(false);
                      setIsMessageDialogOpen(true);
                    }}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    <MessageCircle className="w-4 h-4 ml-2" />
                    پیام
                  </Button>
                  <Button
                    onClick={() => {
                      startVideoCall(selectedUserProfile.id);
                      setIsUserProfileDialogOpen(false);
                    }}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    <Video className="w-4 h-4 ml-2" />
                    تماس تصویری
                  </Button>
                  <Button
                    onClick={() => setIsUserProfileDialogOpen(false)}
                    variant="outline"
                    className="border-slate-600 text-slate-300 hover:bg-slate-700"
                  >
                    بستن
                  </Button>
                </div>
              </div>
            )}
          </DialogContent>
        </Dialog>

        {/* Video Call Interface */}
        <Dialog open={isVideoCallActive} onOpenChange={() => {}}>
          <DialogContent className="bg-black border-gray-700 text-white max-w-4xl w-full h-[80vh] p-0">
            <div className="relative w-full h-full flex flex-col">
              {/* Call Header */}
              <div className="absolute top-4 left-4 right-4 z-10 flex justify-between items-center">
                <div className="bg-black/50 backdrop-blur-sm rounded-lg p-3">
                  <h3 className="text-white font-medium">{selectedUserProfile?.username}</h3>
                  <p className="text-green-400 text-sm">{formatCallDuration(callDuration)}</p>
                </div>
                <div className="bg-red-600 hover:bg-red-700 rounded-full p-2 cursor-pointer" onClick={endVideoCall}>
                  <PhoneOff className="w-6 h-6 text-white" />
                </div>
              </div>

              {/* Video Areas */}
              <div className="flex-1 relative">
                {/* Remote Video (Full Screen) */}
                <div className="w-full h-full bg-gray-900 flex items-center justify-center">
                  <div className="text-center">
                    <Avatar className="w-32 h-32 mx-auto mb-4">
                      <AvatarImage src={selectedUserProfile?.avatar} />
                      <AvatarFallback className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-4xl">
                        {selectedUserProfile?.username?.charAt(0).toUpperCase()}
                      </AvatarFallback>
                    </Avatar>
                    <p className="text-white text-lg">{selectedUserProfile?.username}</p>
                    <p className="text-gray-400">در حال اتصال...</p>
                  </div>
                </div>

                {/* Local Video (Picture in Picture) */}
                <div className="absolute bottom-20 right-4 w-48 h-36 bg-gray-800 rounded-lg overflow-hidden border-2 border-white/20">
                  {localStream && (
                    <video
                      ref={(video) => {
                        if (video && localStream) {
                          video.srcObject = localStream;
                          video.play();
                        }
                      }}
                      autoPlay
                      muted
                      className="w-full h-full object-cover"
                    />
                  )}
                  {!isVideoEnabled && (
                    <div className="absolute inset-0 bg-gray-900 flex items-center justify-center">
                      <Camera className="w-8 h-8 text-gray-400" />
                    </div>
                  )}
                </div>
              </div>

              {/* Call Controls */}
              <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-4">
                <Button
                  onClick={toggleMute}
                  className={`rounded-full w-12 h-12 ${isMuted ? 'bg-red-600 hover:bg-red-700' : 'bg-gray-600 hover:bg-gray-700'}`}
                >
                  {isMuted ? <MicOff className="w-6 h-6" /> : <Mic className="w-6 h-6" />}
                </Button>
                
                <Button
                  onClick={toggleVideo}
                  className={`rounded-full w-12 h-12 ${!isVideoEnabled ? 'bg-red-600 hover:bg-red-700' : 'bg-gray-600 hover:bg-gray-700'}`}
                >
                  <Video className="w-6 h-6" />
                </Button>

                <Button
                  onClick={endVideoCall}
                  className="rounded-full w-12 h-12 bg-red-600 hover:bg-red-700"
                >
                  <PhoneOff className="w-6 h-6" />
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Search Dialog */}
        <Dialog open={isSearchDialogOpen} onOpenChange={setIsSearchDialogOpen}>
          <DialogContent className="max-w-4xl bg-gradient-to-br from-slate-900 to-slate-800 border-slate-700 text-white max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="text-xl font-bold text-center text-blue-400">
                {t('search')} & {t('filter')}
              </DialogTitle>
            </DialogHeader>

            <div className="space-y-6">
              {/* Search Input */}
              <div className="relative">
                <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5" />
                <Input
                  value={filters.search || ""}
                  onChange={(e) => handleFilterChange({ search: e.target.value })}
                  className="pr-10 bg-white/10 border-white/20 text-white placeholder-slate-400 h-12 text-lg"
                  placeholder={t('search')}
                />
              </div>

              {/* Filters Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {/* Gender Filter */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-slate-300">Looking for</label>
                  <Select value={filters.gender || "all"} onValueChange={(value) => handleFilterChange({ gender: value === "all" ? undefined : value })}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white h-10">
                      <SelectValue placeholder="All" />
                    </SelectTrigger>
                    <SelectContent className="bg-slate-800 border-slate-700">
                      <SelectItem value="all">All</SelectItem>
                      <SelectItem value="Male">Male</SelectItem>
                      <SelectItem value="Female">Female</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* Age Range */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-slate-300">Min Age</label>
                  <Input
                    type="number"
                    value={filters.minAge || ""}
                    onChange={(e) => handleFilterChange({ minAge: e.target.value ? parseInt(e.target.value) : undefined })}
                    className="bg-white/10 border-white/20 text-white placeholder-slate-400 h-10"
                    placeholder="18"
                  />
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium text-slate-300">Max Age</label>
                  <Input
                    type="number"
                    value={filters.maxAge || ""}
                    onChange={(e) => handleFilterChange({ maxAge: e.target.value ? parseInt(e.target.value) : undefined })}
                    className="bg-white/10 border-white/20 text-white placeholder-slate-400 h-10"
                    placeholder="65"
                  />
                </div>

                {/* Location */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-slate-300">{t('location')}</label>
                  <Input
                    value={filters.location || ""}
                    onChange={(e) => handleFilterChange({ location: e.target.value })}
                    className="bg-white/10 border-white/20 text-white placeholder-slate-400 h-10"
                    placeholder={t('location')}
                  />
                </div>

                {/* Verification Status */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-slate-300">Verification</label>
                  <Select value={filters.isVerified ? "verified" : "all"} onValueChange={(value) => handleFilterChange({ isVerified: value === "verified" ? true : undefined })}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white h-10">
                      <SelectValue placeholder="All" />
                    </SelectTrigger>
                    <SelectContent className="bg-slate-800 border-slate-700">
                      <SelectItem value="all">All</SelectItem>
                      <SelectItem value="verified">Verified</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* VIP Status */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-slate-300">VIP Status</label>
                  <Select value={filters.vipOnly ? "vip" : "all"} onValueChange={(value) => handleFilterChange({ vipOnly: value === "vip" ? true : undefined })}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white h-10">
                      <SelectValue placeholder="All" />
                    </SelectTrigger>
                    <SelectContent className="bg-slate-800 border-slate-700">
                      <SelectItem value="all">All</SelectItem>
                      <SelectItem value="vip">VIP Only</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Results */}
              <div className="border-t border-slate-700 pt-6">
                <h3 className="text-lg font-semibold mb-4 text-blue-400">Search Results</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto">
                  {usersLoading ? (
                    <div className="col-span-full flex justify-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400"></div>
                    </div>
                  ) : (
                    usersData?.users?.filter((user: any) => user.id !== userData.user.id).map((user: any) => (
                      <motion.div
                        key={user.id}
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.2 }}
                      >
                        <Card 
                          onClick={() => {
                            setSelectedUserProfile(user);
                            setIsUserProfileDialogOpen(true);
                            setIsSearchDialogOpen(false);
                          }}
                          className="glass-effect border-white/20 hover:bg-white/10 cursor-pointer transition-all duration-200 p-4"
                        >
                          <div className="text-center">
                            <Avatar className="w-16 h-16 mx-auto mb-3">
                              <AvatarImage src={user.avatar} />
                              <AvatarFallback className="bg-gradient-to-r from-blue-500 to-purple-600 text-white text-lg">
                                {user.username.charAt(0).toUpperCase()}
                              </AvatarFallback>
                            </Avatar>
                            <div className="flex items-center justify-center space-x-1 space-x-reverse mb-2">
                              {user.isVip && <Crown className="w-4 h-4 text-yellow-400" />}
                              {user.isIdentityVerified && <ShieldCheck className="w-4 h-4 text-blue-400" />}
                              <h3 className="font-semibold text-white truncate">{user.username}</h3>
                            </div>
                            <p className="text-slate-300 text-sm">{user.age} years old</p>
                            {user.location && <p className="text-slate-400 text-xs">{user.location}</p>}
                            <div className="flex justify-center mt-2 space-x-1">
                              {user.isPhoneVerified && <Badge className="bg-green-500/20 text-green-400 text-xs">Phone</Badge>}
                              {user.isAgeVerified && <Badge className="bg-blue-500/20 text-blue-400 text-xs">Age</Badge>}
                              {user.isIdentityVerified && <Badge className="bg-purple-500/20 text-purple-400 text-xs">ID</Badge>}
                            </div>
                          </div>
                        </Card>
                      </motion.div>
                    ))
                  )}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex justify-between pt-4 border-t border-slate-700">
                <Button
                  onClick={() => {
                    handleFilterChange({
                      search: undefined,
                      gender: undefined,
                      minAge: undefined,
                      maxAge: undefined,
                      location: undefined,
                      isVerified: undefined,
                      vipOnly: undefined
                    });
                  }}
                  variant="outline"
                  className="border-slate-600 text-slate-300 hover:bg-slate-700"
                >
                  Clear Filters
                </Button>
                <Button
                  onClick={() => setIsSearchDialogOpen(false)}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  Close
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Age Verification Dialog */}
        <Dialog open={isAgeVerificationOpen} onOpenChange={setIsAgeVerificationOpen}>
          <DialogContent className="max-w-md bg-gradient-to-br from-slate-900 to-slate-800 border-slate-700 text-white">
            <DialogHeader>
              <DialogTitle className="text-xl font-bold text-center text-blue-400">
                تایید سن
              </DialogTitle>
            </DialogHeader>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  تاریخ تولد
                </label>
                <Input
                  type="date"
                  value={birthDate}
                  onChange={(e) => setBirthDate(e.target.value)}
                  className="bg-white/10 border-white/20 text-white"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  عکس مدرک (کارت ملی یا گذرنامه)
                </label>
                <div className="border-2 border-dashed border-slate-600 rounded-lg p-4 text-center">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) {
                        const reader = new FileReader();
                        reader.onload = (event) => {
                          setDocumentPhoto(event.target?.result as string);
                        };
                        reader.readAsDataURL(file);
                      }
                    }}
                    className="hidden"
                    id="document-upload"
                  />
                  <label htmlFor="document-upload" className="cursor-pointer">
                    <div className="text-slate-400 mb-2">
                      <Upload className="w-8 h-8 mx-auto mb-2" />
                      آپلود عکس مدرک
                    </div>
                  </label>
                  {documentPhoto && (
                    <div className="mt-4">
                      <img src={documentPhoto} alt="Document" className="w-24 h-24 object-cover rounded-lg mx-auto" />
                    </div>
                  )}
                </div>
              </div>

              <div className="flex space-x-3 space-x-reverse pt-4">
                <Button
                  onClick={() => setIsAgeVerificationOpen(false)}
                  variant="outline"
                  className="flex-1 border-slate-600 text-slate-300 hover:bg-slate-700"
                >
                  انصراف
                </Button>
                <Button
                  onClick={() => {
                    if (birthDate && documentPhoto) {
                      verifyAgeMutation.mutate({ birthDate, documentPhoto });
                      setIsAgeVerificationOpen(false);
                    }
                  }}
                  disabled={!birthDate || !documentPhoto || verifyAgeMutation.isPending}
                  className="flex-1 bg-blue-600 hover:bg-blue-700"
                >
                  {verifyAgeMutation.isPending ? "در حال تایید..." : "تایید سن"}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Identity Verification Dialog */}
        <Dialog open={isIdentityVerificationOpen} onOpenChange={setIsIdentityVerificationOpen}>
          <DialogContent className="max-w-lg bg-gradient-to-br from-slate-900 to-slate-800 border-slate-700 text-white max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="text-xl font-bold text-center text-blue-400">
                تایید هویت
              </DialogTitle>
            </DialogHeader>

            <div className="space-y-6">
              {/* ID Card Upload */}
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  عکس کارت ملی (جلو)
                </label>
                <div className="border-2 border-dashed border-slate-600 rounded-lg p-4 text-center">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) {
                        const reader = new FileReader();
                        reader.onload = (event) => {
                          setIdCardPhoto(event.target?.result as string);
                        };
                        reader.readAsDataURL(file);
                      }
                    }}
                    className="hidden"
                    id="id-card-upload"
                  />
                  <label htmlFor="id-card-upload" className="cursor-pointer">
                    <div className="text-slate-400 mb-2">
                      <Upload className="w-6 h-6 mx-auto mb-2" />
                      آپلود کارت ملی
                    </div>
                  </label>
                  {idCardPhoto && (
                    <div className="mt-3">
                      <img src={idCardPhoto} alt="ID Card" className="w-20 h-20 object-cover rounded-lg mx-auto" />
                    </div>
                  )}
                </div>
              </div>

              {/* Passport Upload (Optional) */}
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  عکس گذرنامه (اختیاری)
                </label>
                <div className="border-2 border-dashed border-slate-600 rounded-lg p-4 text-center">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) {
                        const reader = new FileReader();
                        reader.onload = (event) => {
                          setPassportPhoto(event.target?.result as string);
                        };
                        reader.readAsDataURL(file);
                      }
                    }}
                    className="hidden"
                    id="passport-upload"
                  />
                  <label htmlFor="passport-upload" className="cursor-pointer">
                    <div className="text-slate-400 mb-2">
                      <Upload className="w-6 h-6 mx-auto mb-2" />
                      آپلود گذرنامه
                    </div>
                  </label>
                  {passportPhoto && (
                    <div className="mt-3">
                      <img src={passportPhoto} alt="Passport" className="w-20 h-20 object-cover rounded-lg mx-auto" />
                    </div>
                  )}
                </div>
              </div>

              {/* Selfie Upload */}
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  عکس سلفی با نگه داشتن مدرک
                </label>
                <div className="border-2 border-dashed border-slate-600 rounded-lg p-4 text-center">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) {
                        const reader = new FileReader();
                        reader.onload = (event) => {
                          setSelfiePhoto(event.target?.result as string);
                        };
                        reader.readAsDataURL(file);
                      }
                    }}
                    className="hidden"
                    id="selfie-upload"
                  />
                  <label htmlFor="selfie-upload" className="cursor-pointer">
                    <div className="text-slate-400 mb-2">
                      <Upload className="w-6 h-6 mx-auto mb-2" />
                      آپلود عکس سلفی
                    </div>
                  </label>
                  {selfiePhoto && (
                    <div className="mt-3">
                      <img src={selfiePhoto} alt="Selfie" className="w-20 h-20 object-cover rounded-lg mx-auto" />
                    </div>
                  )}
                </div>
              </div>

              <div className="bg-yellow-900/20 border border-yellow-600/30 rounded-lg p-3">
                <p className="text-yellow-200 text-sm">
                  ⚠️ لطفاً عکس سلفی خود را در حالی که مدرک شناسایی را در دست دارید آپلود کنید. این برای تایید هویت شما ضروری است.
                </p>
              </div>

              <div className="flex space-x-3 space-x-reverse pt-4">
                <Button
                  onClick={() => setIsIdentityVerificationOpen(false)}
                  variant="outline"
                  className="flex-1 border-slate-600 text-slate-300 hover:bg-slate-700"
                >
                  انصراف
                </Button>
                <Button
                  onClick={() => {
                    if ((idCardPhoto || passportPhoto) && selfiePhoto) {
                      verifyIdentityMutation.mutate({ idCardPhoto, passportPhoto, selfiePhoto });
                      setIsIdentityVerificationOpen(false);
                    }
                  }}
                  disabled={!(idCardPhoto || passportPhoto) || !selfiePhoto || verifyIdentityMutation.isPending}
                  className="flex-1 bg-blue-600 hover:bg-blue-700"
                >
                  {verifyIdentityMutation.isPending ? "در حال تایید..." : "تایید هویت"}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}
